// Mocks generated by Mockito 5.4.5 from annotations
// in fitness_app/test/features/main_layout/presentation/view/main_layout_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fitness_app/features/main_layout/presentation/view_model/cubit/main_layout_cubit.dart'
    as _i2;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MainLayoutCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainLayoutCubit extends _i1.Mock implements _i2.MainLayoutCubit {
  MockMainLayoutCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MainLayoutTabs get currentTab =>
      (super.noSuchMethod(
            Invocation.getter(#currentTab),
            returnValue: _i2.MainLayoutTabs.home,
          )
          as _i2.MainLayoutTabs);

  @override
  set currentTab(_i2.MainLayoutTabs? _currentTab) => super.noSuchMethod(
    Invocation.setter(#currentTab, _currentTab),
    returnValueForMissingStub: null,
  );

  @override
  Map<_i2.MainLayoutTabs, _i3.Widget Function()> get tabs =>
      (super.noSuchMethod(
            Invocation.getter(#tabs),
            returnValue: <_i2.MainLayoutTabs, _i3.Widget Function()>{},
          )
          as Map<_i2.MainLayoutTabs, _i3.Widget Function()>);

  @override
  set tabs(Map<_i2.MainLayoutTabs, _i3.Widget Function()>? _tabs) =>
      super.noSuchMethod(
        Invocation.setter(#tabs, _tabs),
        returnValueForMissingStub: null,
      );

  @override
  _i2.MainLayoutState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i4.dummyValue<_i2.MainLayoutState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.MainLayoutState);

  @override
  _i5.Stream<_i2.MainLayoutState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.MainLayoutState>.empty(),
          )
          as _i5.Stream<_i2.MainLayoutState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void doIntent(_i2.MainLayoutActions? action) => super.noSuchMethod(
    Invocation.method(#doIntent, [action]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.MainLayoutState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i2.MainLayoutState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
